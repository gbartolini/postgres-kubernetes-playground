apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: @@CLUSTER_PREFIX@@-@@CLUSTER_PRIMARY_REGION@@
spec:
  imageName: ghcr.io/cloudnative-pg/postgresql:15

  # Disable remote access as `postgres` superuser
  enableSuperuserAccess: false

  # One primary and two replicas (one at least synchronous)
  instances: 1
  minSyncReplicas: 0
  maxSyncReplicas: 0

  # Require different zones and different nodes with label "workload=postgres"
  topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        cnpg.io/cluster: @@CLUSTER_PREFIX@@-@@CLUSTER_PRIMARY_REGION@@
  affinity:
    nodeSelector:
      workload: postgres
    tolerations:
    - key: "workload"
      operator: "Equal"
      value: "postgres"
      effect: "NoExecute"

  # Request Guaranteed QoS
  resources:
    requests:
      memory: '12Gi'
      cpu: 1.5
    limits:
      memory: '12Gi'
      cpu: 1.5

  startDelay: 300
  stopDelay: 300
  switchoverDelay: 600

  # Volume with PGDATA
  storage:
    storageClass: standard-rwo
    size: 80Gi

  # Volume for WALs
  walStorage:
    storageClass: standard-rwo
    size: 10Gi

  # Cluster initialization
  bootstrap:
    recovery:
      volumeSnapshots:
        storage:
          name: @@SNAPSHOT_VOLUME@@
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
        walStorage:
          name: @@SNAPSHOT_WAL@@
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io

  # Enable replication slots for HA
  replicationSlots:
    highAvailability:
      enabled: true

  # PostgreSQL configuration
  postgresql:
    parameters:
      # Connections
      max_connections: '100'

      # Memory configuration
      shared_buffers: '4GB'
      maintenance_work_mem: '1GB'
      effective_cache_size: '15GB'
      shared_memory_type: 'sysv'
      dynamic_shared_memory_type: 'sysv'

      # Checkpoint management
      min_wal_size: '1GB'
      max_wal_size: '5GB'
      checkpoint_timeout: '900s'
      checkpoint_completion_target: '0.9'

      # Log configuration
      log_checkpoints: 'on'
      log_lock_waits: 'on'
      log_min_duration_statement: '1000'
      log_statement: 'ddl'
      log_temp_files: '1024'
      log_autovacuum_min_duration: '1s'

      # Enable pg_stat_statements
      pg_stat_statements.max: '10000'
      pg_stat_statements.track: 'all'

      # Replication
      hot_standby_feedback: 'on'
      max_slot_wal_keep_size: '8GB'

  monitoring:
    enablePodMonitor: true

  # Backup configuration
  backup:
    volumeSnapshot:
      className: cnpg-snapshotclass
    barmanObjectStore:
      destinationPath: gs://@@CLUSTER_PREFIX@@-@@CLUSTER_PRIMARY_REGION@@/
      googleCredentials:
        gkeEnvironment: true
      data:
        compression: gzip
        jobs: 2
        immediateCheckpoint: true
      wal:
        compression: gzip
        maxParallel: 2
    retentionPolicy: '7d'

  serviceAccountTemplate:
    metadata:
      annotations:
        iam.gke.io/gcp-service-account: @@CLUSTER_PREFIX@@-@@CLUSTER_PRIMARY_REGION@@-user@@@GCP_PROJECT@@.iam.gserviceaccount.com

---
apiVersion: postgresql.cnpg.io/v1
kind: ScheduledBackup
metadata:
  name: @@CLUSTER_PREFIX@@-@@CLUSTER_PRIMARY_REGION@@-backup
spec:
  schedule: '0 0 0 * * *'
  backupOwnerReference: self
  method: volumeSnapshot
  cluster:
    name: @@CLUSTER_PREFIX@@-@@CLUSTER_PRIMARY_REGION@@
  immediate: true
