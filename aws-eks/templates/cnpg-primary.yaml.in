apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: @@CLUSTER_PREFIX@@-@@CLUSTER_PRIMARY_REGION@@
spec:
  imageName: ghcr.io/cloudnative-pg/postgresql:16

  # One primary and two replicas (one at least synchronous)
  instances: 3
  minSyncReplicas: 1
  maxSyncReplicas: 1

  # Require different zones and different nodes with label "workload=postgres"
  topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: DoNotSchedule
    labelSelector:
      matchLabels:
        cnpg.io/cluster: @@CLUSTER_PREFIX@@-@@CLUSTER_PRIMARY_REGION@@
  affinity:
    nodeSelector:
      workload: postgres

  # Request Guaranteed QoS
  resources:
    requests:
      memory: '14Gi'
      cpu: 1.5
    limits:
      memory: '14Gi'
      cpu: 1.5

  # Volume with PGDATA
  storage:
    storageClass: ebs-sc
    size: 50Gi

  # Volume for WALs
  walStorage:
    storageClass: ebs-sc
    size: 10Gi

  # Cluster initialization
  bootstrap:
    initdb:
      dataChecksums: true
      walSegmentSize: 64
      postInitSQL:
        - CREATE DATABASE pgbench OWNER app
  replica:
    primary: @@CLUSTER_PREFIX@@-@@CLUSTER_PRIMARY_REGION@@
    source: @@CLUSTER_PREFIX@@-@@CLUSTER_SECONDARY_REGION@@

  # Remove read-only and read services, then create an entry point from the Internet
  managed:
    services:
      disabledDefaultServices: ["ro", "r"]
      additional:
      - selectorType: rw
        serviceTemplate:
          metadata:
            name: "@@CLUSTER_PREFIX@@-@@CLUSTER_PRIMARY_REGION@@-lb"
            # See https://docs.aws.amazon.com/eks/latest/userguide/network-load-balancing.html#load-balancer-sample-application
            annotations:
              service.beta.kubernetes.io/aws-load-balancer-type: external
              service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
              service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
          spec:
            type: LoadBalancer

  # PostgreSQL configuration
  postgresql:
    parameters:
      # Connections
      max_connections: '100'

      # Memory configuration
      shared_buffers: '4GB'
      maintenance_work_mem: '1GB'
      effective_cache_size: '15GB'
      shared_memory_type: 'sysv'
      dynamic_shared_memory_type: 'sysv'

      # Checkpoint management
      min_wal_size: '1GB'
      max_wal_size: '5GB'
      checkpoint_timeout: '900s'
      checkpoint_completion_target: '0.9'

      # Log configuration
      log_checkpoints: 'on'
      log_lock_waits: 'on'
      log_min_duration_statement: '1000'
      log_statement: 'ddl'
      log_temp_files: '1024'
      log_autovacuum_min_duration: '1s'

      # Enable pg_stat_statements
      pg_stat_statements.max: '10000'
      pg_stat_statements.track: 'all'

      # Replication
      hot_standby_feedback: 'on'
      max_slot_wal_keep_size: '9GB'

  monitoring:
    enablePodMonitor: true

  # External clusters participating in a distributed topology
  externalClusters:
    - name: @@CLUSTER_PREFIX@@-@@CLUSTER_PRIMARY_REGION@@
      barmanObjectStore:
        destinationPath: s3://@@CLUSTER_PREFIX@@-@@CLUSTER_PRIMARY_REGION@@/
        s3Credentials:
          inheritFromIAMRole: true
        data:
          compression: gzip
          jobs: 2
        wal:
          compression: gzip
          maxParallel: 2
    - name: @@CLUSTER_PREFIX@@-@@CLUSTER_SECONDARY_REGION@@
      barmanObjectStore:
        destinationPath: s3://@@CLUSTER_PREFIX@@-@@CLUSTER_SECONDARY_REGION@@/
        s3Credentials:
          inheritFromIAMRole: true
        data:
          compression: gzip
          jobs: 2
        wal:
          compression: gzip
          maxParallel: 2

  serviceAccountTemplate:
    metadata:
      annotations:
        eks.amazonaws.com/role-arn: # Replace this with the result of `eksctl --region @@CLUSTER_PRIMARY_REGION@@ --cluster @@CLUSTER_PREFIX@@-@@CLUSTER_PRIMARY_REGION@@ get iamserviceaccount @@CLUSTER_PREFIX@@-@@CLUSTER_PRIMARY_REGION@@ -o json | jq '.[0].status.roleARN'`

  # Backup configuration
  backup:
    volumeSnapshot:
      className: csi-aws-vsc
    barmanObjectStore:
      destinationPath: s3://@@CLUSTER_PREFIX@@-@@CLUSTER_PRIMARY_REGION@@/
      s3Credentials:
        inheritFromIAMRole: true
      data:
        compression: gzip
        jobs: 2
        immediateCheckpoint: true
      wal:
        compression: gzip
        maxParallel: 2
    retentionPolicy: '7d'

---
apiVersion: postgresql.cnpg.io/v1
kind: ScheduledBackup
metadata:
  name: @@CLUSTER_PREFIX@@-@@CLUSTER_PRIMARY_REGION@@-backup
spec:
  schedule: '0 0 0 * * *'
  backupOwnerReference: self
  cluster:
    name: @@CLUSTER_PREFIX@@-@@CLUSTER_PRIMARY_REGION@@
  immediate: true
